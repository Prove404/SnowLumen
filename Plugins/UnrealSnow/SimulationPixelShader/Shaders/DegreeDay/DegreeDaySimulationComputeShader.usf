#include "/Engine/Public/Platform.ush"
#define UINT_FLOAT_SCALE 100000.0f
#define PI 3.14159265f

struct SolarRadiation
{
	float Sunrise;
	float Sunset;
	float Ri;
};

struct SimulationCell
{
	float Aspect;
	float Inclination;
	float Altitude;
	float Latitude;
	float Area;
	float AreaXY;
	float SnowWaterEquivalent;
	float InterpolatedSWE;
	float SnowAlbedo;
	float DaysSinceLastSnowfall;
	float Curvature;
};

struct WeatherData
{
	float Temperature;
	float Precipitation;
};

RWTexture2D<uint> OutputSurface;
RWStructuredBuffer<SimulationCell> SimulationCellsBuffer;
RWStructuredBuffer<WeatherData> WeatherDataBuffer;
RWStructuredBuffer<uint> MaxSnowBuffer;
RWStructuredBuffer<float> SnowOutputBuffer;

// sunrise/sunset
float Func2(float L, float D) 
{
	return acos(clamp(-tan(L) * tan(D), -1.0f, 1.0f));
}

// radiation
float Func3(float V, float W, float X, float Y, float R1, float D) 
{
	return R1 * (sin(D) * sin(W) * (X - Y) * (12 / PI) + 
		cos(D) * cos(W) * (sin(X + V) - sin(Y + V)) * (12 / PI));
}

/**
* Calculates the solar radiation as described in Swifts "Algorithm for Solar Radiation on Mountain Slopes".
*
* @param I		The inclination of the slope in radians.
* @param A		The aspect (compass direction) that the slope faces in radians.
* @param L0		The latitude of the slope in radians.
*/
float SolarRadiationIndex(float I, float A, float L0, float J, out float T4, out float T5)
{
	float L1 = asin(cos(I) * sin(L0) + sin(I) * cos(L0) * cos(A));
	float D1 = cos(I) * cos(L0) - sin(I) * sin(L0) * cos(A);
	float L2 = atan((sin(I) * sin(A)) / (cos(I) * cos(L0) - sin(I) * sin(L0) * cos(A)));

	float D = 0.007 - 0.4067 * cos((J + 10) * 0.0172);
	float E = 1.0 - 0.0167 * cos((J - 3) * 0.0172);

	const float R0 = 1.95;
	float R1 = 60 * R0 / (E * E);
	// float R1 = (PI / 3) * R0 / (E * E);

	float T;

	T = Func2(L1, D);
	float T7 = T - L2;
	float T6 = -T - L2;
	T = Func2(L0, D);
	float T1 = T;
	float T0 = -T;
	float T3 = min(T7, T1);
	float T2 = max(T6, T0);

	T4 = T2 * (12 / PI);
	T5 = T3 * (12 / PI);

	//float R4 = Func3(L2, L1, T3, T2, R1, D); // Figure1
	if (T3 < T2) // Figure2
	{
		T2 = T3 = 0;
	}

	T6 = T6 + PI * 2;

	float R4;
	if (T6 < T1)
	{
		float T8 = T6;
		float T9 = T1;
		R4 = Func3(L2, L1, T3, T2, R1, D) + Func3(L2, L1, T9, T8, R1, D);
	} 
	else
	{
		T7 = T7 - PI * 2;

		if (T7 > T0)
		{
			float T8 = T0;
			float T9 = T0;
			R4 = Func3(L2, L1, T3, T2, R1, D) + Func3(L2, L1, T9, T8, R1, D);
		}
		else
		{
			R4 = Func3(L2, L1, T3, T2, R1, D);
		}
	}

	float R3 = Func3(0.0, L0, T1, T0, R1, D);

	return R4 / R3;
}


[numthreads(4, 4, 1)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{
	int cellIndex = ThreadId.x + ThreadId.y * SimulationCSConstants.CellsDimensionX;
	int cellIndexX = cellIndex % SimulationCSConstants.CellsDimensionX;
	int cellIndexY = cellIndex / SimulationCSConstants.CellsDimensionX;

	SimulationCell cell = SimulationCellsBuffer[cellIndex];
	float areaSquareMeters = SimulationCellsBuffer[cellIndex].AreaXY / (100 * 100); // m^2

	for (int time = 0; time < SimulationCSVariables.Timesteps; ++time) {
		float stationAltitudeOffset = (SimulationCellsBuffer[cellIndex].Altitude - SimulationCSConstants.MeasurementAltitude); 	
		float temperatureLapse = -0.5f * stationAltitudeOffset / (100 * 100);
		float tAir = WeatherDataBuffer[SimulationCSVariables.CurrentSimulationStep + time].Temperature + temperatureLapse; // degree Celsius
	
		float precipitationLapse = 10.0f / 24.0f * stationAltitudeOffset / (100 * 1000);
		// float precipitationLapse = 0;
		float precipitation = WeatherDataBuffer[SimulationCSVariables.CurrentSimulationStep + time].Precipitation;

		SimulationCellsBuffer[cellIndex].DaysSinceLastSnowfall += 1.0f / 24.0f;

		// Apply precipitation
		if (precipitation > 0)
		{
			precipitation += precipitationLapse;
			SimulationCellsBuffer[cellIndex].DaysSinceLastSnowfall = 0;

			// New snow/rainfall
			bool rain = tAir > SimulationCSConstants.TSnowB;

			if (tAir > SimulationCSConstants.TSnowB)
			{
				SimulationCellsBuffer[cellIndex].SnowAlbedo = 0.4; // New rain drops the albedo to 0.4
			}
			else 
			{
				// Variable lapse rate as described in "A variable lapse rate snowline model for the Remarkables, Central Otago, New Zealand"
				float snowRate = clamp(1 - (tAir - SimulationCSConstants.TSnowA) / (SimulationCSConstants.TSnowB - SimulationCSConstants.TSnowA), 0.0f, 1.0f);

				SimulationCellsBuffer[cellIndex].SnowWaterEquivalent += (precipitation * areaSquareMeters * snowRate); // l/m^2 * m^2 = l
				SimulationCellsBuffer[cellIndex].SnowAlbedo = 0.8; // New snow sets the albedo to 0.8
			}
		}

		// Apply melt
		if (SimulationCellsBuffer[cellIndex].SnowWaterEquivalent > 0)
		{
			if (SimulationCellsBuffer[cellIndex].DaysSinceLastSnowfall >= 0) {
				// @TODO is time T the degree-days or the time since the last snowfall?
				SimulationCellsBuffer[cellIndex].SnowAlbedo = 0.4 * (1 + exp(-SimulationCSConstants.k_e * SimulationCellsBuffer[cellIndex].DaysSinceLastSnowfall)); 
			}

			// Temperature higher than melt threshold and cell contains snow
			if (tAir > SimulationCSConstants.TMeltA)
			{
				const float dayNormalization = 1.0 / 24.0; // day 

				float T4;
				float T5;

				// Radiation Index
				const float r_i = SolarRadiationIndex(SimulationCellsBuffer[cellIndex].Inclination, SimulationCellsBuffer[cellIndex].Aspect, SimulationCellsBuffer[cellIndex].Latitude, SimulationCSVariables.DayOfYear, T4, T5); // 1
				
				// Diurnal approximation
				const float t = SimulationCSVariables.HourOfDay;
				const float D = abs(T4) + abs(T5);
				const float r_i_t = max(PI * r_i / 2 * sin(PI * t / D - abs(T4) / PI), 0); 

				// Melt factor
				// @TODO melt factor test
				const float vegetationDensity = 0;
				const float k_v = exp(-4 * vegetationDensity); // 1
				const float c_m = SimulationCSConstants.k_m * k_v * r_i_t  *  (1 - SimulationCellsBuffer[cellIndex].SnowAlbedo) * dayNormalization * areaSquareMeters; // l/m^2/C�/day * day * m^2 = l/m^2 * 1/day * day * m^2 = l/C�
				const float meltFactor = tAir < SimulationCSConstants.TMeltB ? 
								(tAir - SimulationCSConstants.TMeltA) * (tAir - SimulationCSConstants.TMeltA) / (SimulationCSConstants.TMeltB - SimulationCSConstants.TMeltA) : 
								(tAir - SimulationCSConstants.TMeltA);
			
				const float m = c_m * meltFactor; // l/C� * C� = l

				// Apply melt
				SimulationCellsBuffer[cellIndex].SnowWaterEquivalent -= m; 
				SimulationCellsBuffer[cellIndex].SnowWaterEquivalent = max(0.0f, SimulationCellsBuffer[cellIndex].SnowWaterEquivalent);
			}
		}
	}
	

	float slope = degrees(SimulationCellsBuffer[cellIndex].Inclination);
	

	float f = slope < 15 ? 0 : slope / 60;
	float a3 = 50;
	
	float we = max(0.0f, SimulationCellsBuffer[cellIndex].SnowWaterEquivalent * (1 - f) * (1 + a3 * SimulationCellsBuffer[cellIndex].Curvature));
	
	SimulationCellsBuffer[cellIndex].InterpolatedSWE = we;

	// Find global max
	InterlockedMax(MaxSnowBuffer[0], (uint)(we / areaSquareMeters * UINT_FLOAT_SCALE));

	// Used for the pixel shader
	SnowOutputBuffer[cellIndex] = we / areaSquareMeters;
}


